# Example of a conf file to load grammars in L-System program #
# BELOW some examples of more realistic grammars #

# simple 2D tree #
TREE
SOL
{
	SYMBOLS
	{
		[ : SAVEPOSITION
		] : RESTOREPOSITION
		+ : TURNRIGHT
		- : TURNLEFT
		^ : TURNUP
		v : TURNDOWN
		F : FORWARD
		A : FORWARD
	}

	AXIOM: A
	ANGLE: 10

	RULES
	{
		F -> FF
		A -> F[+A]-A: 0.25
		A -> F[++A]--A: 0.25
		A -> F[+++A]---A: 0.25
		A -> F[++++A]----A: 0.25
		A -> AA: 0.5
		
	}
}

# more complex 3D tree without leaves #
# make 13 iterations on this, taken from http://www.geekyblogger.com/2008/04/tree-and-l-system.html #
SpecificTreeA
DOL
{
	SYMBOLS
	{
		[ : SAVEPOSITION
		] : RESTOREPOSITION
		+ : TURNRIGHT
		- : TURNLEFT
		^ : TURNUP
		v : TURNDOWN
		( : ROLLLEFT
		) : ROLLRIGHT
		f : FORWARD
		A
		B
		C
	}
	AXIOM: C
	ANGLE: 15
	RULES
	{
		A -> ^fB)))B)))))B
		B -> [^^f))))))A]
		C -> fA
	}
}

# more complex 3D tree with leaves (symbol "l") #
# make 10 iterations on this, taken from http://www.geekyblogger.com/2008/04/tree-and-l-system.html #
SpecificTreeB
DOL
{
	SYMBOLS
	{
		[ : SAVEPOSITION
		] : RESTOREPOSITION
		+ : TURNRIGHT
		- : TURNLEFT
		^ : TURNUP
		v : TURNDOWN
		( : ROLLLEFT
		) : ROLLRIGHT
		f : FORWARD
		l #: 21  LEAF #
		A
		B
		C
	}
	AXIOM: C
	ANGLE: 30
	RULES
	{
		A -> f[^Bl]))[^Bl]))A
		B -> f[-Bl]B
		C -> fA
	}
}

# more complex 3D tree with leaves (symbol "l") #
# make 6 iterations on this, taken from http://www.geekyblogger.com/2008/04/tree-and-l-system.html #
SpecificTreeC
DOL
{
	SYMBOLS
	{
		[ : SAVEPOSITION
		] : RESTOREPOSITION
		+ : TURNRIGHT
		- : TURNLEFT
		^ : TURNUP
		v : TURNDOWN
		( : ROLLLEFT
		) : ROLLRIGHT
		f : FORWARD
		l #: 21  LEAF #
		A
		B
		C
	}
	AXIOM: C
	ANGLE: 25
	RULES
	{
		A -> f[++Al][--Al])))A
		C -> fffffA
	}
}

# complex 2D tree without leaves #
# advanced tree with context dependent grammar #
AdvancedTree
SIL
{
	SYMBOLS
	{
		F : FORWARD
		A
		B
		+ : TURNRIGHT
		- : TURNLEFT
		[ : SAVEPOSITION
		] : RESTOREPOSITION
	}
	PHRASE: FAFAFA
	ANGLE: 26
	RULES
	{
		B < B > B -> A
		B < B > A -> A[-FAFA]
		A < B > B -> A
		A < B > A -> A
		B < A > B -> B
		B < A > A -> AFA
		A < A > B -> A
		A < A > A -> B
		+ -> -
		- -> +
	}
}
