# Example of a conf file to load grammars in L-System program #

# first simple example of a grammar with 2 symbols: "a" and "b" #
# it is the same as the one discribed there: #
# https://fr.wikipedia.org/wiki/L-System Exemple 1: l'algue de Lindenmayer #
FIRST_EXAMPLE
DOL
{
	SYMBOLS
	{
		a
		b
	}

	AXIOM: a

	RULES
	{
		a -> ab
		b -> a
	}
}

# Another simple example with interpretations #
# from: https://fr.wikipedia.org/wiki/L-System Exemple de la courbe de Koch #
SECOND_EXAMPLE
DOL
{
	SYMBOLS
	{
		# we precise the interpretation #
		F: FORWARD
		+: TURNLEFT
		-: TURNRIGHT
	}

	AXIOM: F
	# angle = 90°, same as default, we don't have to specify it #
	ANGLE: 90

	RULES
	{
		F -> F+F-F-F+F
	}
}

# a SOL example from http://www.techno-science.net/?onglet=glossaire&definition=11374 #
SOL_Example
SOL
{
	SYMBOLS
	{
		F
		X
		+
		-
		[
		]
	}
	AXIOM: X
	RULES
	{
		X -> F[++X]F[-X]+X: 0.2
		X -> F[+X]F[-X]+X: 0.8
		F -> FF
	}
}

# example of DIL inspired by http://www.techno-science.net/?onglet=glossaire&definition=11374 #
Dil_Example
DIL
{
	SYMBOLS
	{
		A
		B
		C
		+
		-
		[
		]
	}
	PHRASE: B[+C]A[-A]A[+C]A
	RULES
	{
		A < B -> B
		C -> B
		C < A -> A
		# this grammar is determinist: rule(2) is applied only if rule(3) can't be #
	}
}
# the run of this grammar is: #
# 0. B[+C]A[-A]A[+C]A #
# 1. B[+B]B[-B]B[+A]B #
# 2. B[+B]B[-B]B[+B]B and it stay stable on this state #

# last example much more complicated #
# we use a stochastic non context-free L-System #
SCIOUSC
SIL
{
	# we have 3 symbols: a, b and c #
	SYMBOLS
	{
		a: FORWARD
		# we don't precise an interpretation for b, the program will ask us for one #
		b
		c: ABOUTTURN
	}

	# here, we start with a sequence of symbols, so we don't use "AXIOM" #
	PHRASE: aabacc

	ANGLE: 20

	RULES
	{
		a -> b
		# the following rule has more priority than the first rule #
		a < c -> c
		# when "a" and "a", this rule has 50% probability to be applied, just like the previous one if there also were a "c" #
		a < a > b -> bbb
		c < aa -> acb: 0.8
		# when we see "c", this rule has 20% to be applied, while the previous one has 80% #
		c > aa -> ccc: 0.2
		# when "b" and "bbb", we delete the "b" #
		b > bbb -> ε
	}
}
# an example of a run of this grammar is: #
# 0. aabacc #
# 1. bbbbbbacbacb #
# 2. bbcbbbbacbb #
# 3. cbcbb and it stay stable on this state #
